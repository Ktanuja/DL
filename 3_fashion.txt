// Use MNIST Fashion Dataset and create a classifier to classify fashion clothing into
categories.

from tensorflow.keras.datasets import fashion_mnist

import pandas as pd
df=pd.DataFrame(fashion_mnist.load_data())

df.head()


print(df)

(train_x, train_y), (test_x, test_y) = fashion_mnist.load_data()

print(train_y)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, MaxPooling2D, Conv2D

model = Sequential()

model.add(Conv2D(filters=64,kernel_size=(3,3),activation='relu',input_shape=(28, 28, 1)))

# Adding maxpooling layer to get max value within a matrix
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(128, activation = "relu"))
model.add(Dense(10, activation = "softmax"))
model.summary()
model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

import numpy as np
model.fit(train_x.astype(np.float32), train_y.astype(np.float32), epochs = 5, validation_split = 0.2)

loss, acc = model.evaluate(test_x, test_y)

labels = ['t_shirt', 'trouser', 'pullover', 'dress', 'coat', 'sandal', 'shirt', 'sneaker',   'bag', 'ankle_boots']

predictions = model.predict(test_x[:1])

label = labels[np.argmax(predictions)]


import matplotlib.pyplot as plt
print(label)
plt.imshow(test_x[:1][0])
plt.show

matplotlib.pyplot.show
def show(*args, **kwargs)




This code snippet demonstrates building a simple convolutional neural network (CNN) using TensorFlow/Keras to classify fashion clothing items from the MNIST Fashion dataset. Let's break down what each part does:

1. **Loading the Dataset**: The code imports the Fashion MNIST dataset using `fashion_mnist.load_data()` from TensorFlow/Keras. It consists of 60,000 training images and 10,000 test images of fashion items, each 28x28 grayscale pixels.

2. **Data Preprocessing**: The dataset is loaded into `(train_x, train_y)` and `(test_x, test_y)` where `train_x` and `test_x` contain the images and `train_y` and `test_y` contain the corresponding labels.

3. **Building the Model**:
   - Convolutional Layer: The first layer is a Conv2D layer with 64 filters, each of size 3x3, using ReLU activation function, and input shape of 28x28x1 (since it's grayscale).
   - MaxPooling Layer: It's used to reduce the spatial dimensions of the output volume.
   - Flatten Layer: It's used to convert the 2D matrix data to a vector.
   - Dense Layers: Two dense layers follow. The first has 128 neurons with ReLU activation, and the second has 10 neurons with softmax activation for class probabilities.

4. **Model Compilation**: The model is compiled with the Adam optimizer, sparse categorical crossentropy loss function, and accuracy as the metric.

5. **Training the Model**: The model is trained on the training data for 5 epochs with a validation split of 20%.

6. **Model Evaluation**: The trained model is evaluated on the test data to get the loss and accuracy.

7. **Making Predictions**: The model is used to predict the label of the first test image, and the predicted label is converted into a human-readable label using a list of class names.

8. **Displaying the Image**: Matplotlib is used to display the first test image along with its predicted label.

However, there's an issue with displaying the image using `plt.show`. It should be called as `plt.show()` instead of `plt.show`. Also, the `show()` function definition at the end seems redundant and unnecessary. 

Here's the corrected version:

```python
import matplotlib.pyplot as plt

# Displaying the image
print(label)
plt.imshow(test_x[:1][0])
plt.show()
```

This will correctly display the image with its predicted label.